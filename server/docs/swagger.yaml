basePath: /
definitions:
  api.ContentRequest:
    properties:
      contentType:
        type: string
    type: object
  api.Error:
    type: object
  api.HeaderLabel:
    properties:
      header:
        type: string
      label:
        type: string
    type: object
  api.InvitationSocietyName:
    properties:
      code:
        type: string
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      last_update_time:
        type: string
      level:
        type: integer
      name:
        type: string
      societyId:
        type: integer
      societyName:
        type: string
    required:
    - code
    - id
    - level
    - name
    - societyId
    type: object
  api.RecordDetail:
    properties:
      citation:
        type: string
      data:
        additionalProperties:
          type: string
        type: object
      household:
        items:
          $ref: '#/definitions/model.Record'
        type: array
      id:
        example: 999
        type: integer
      imagePath:
        type: string
      insert_time:
        type: string
      ix_hash:
        type: string
      labels:
        items:
          $ref: '#/definitions/api.HeaderLabel'
        type: array
      last_update_time:
        type: string
      post:
        example: 999
        type: integer
    required:
    - data
    - id
    - post
    type: object
  api.RecordsResult:
    properties:
      next_page:
        type: string
      records:
        items:
          $ref: '#/definitions/model.Record'
        type: array
    type: object
  api.SocietyUserName:
    properties:
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      last_update_time:
        type: string
      level:
        type: integer
      societyId:
        type: integer
      userId:
        type: integer
      userName:
        type: string
    required:
    - id
    - level
    - societyId
    - userId
    type: object
  model.Category:
    properties:
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      last_update_time:
        type: string
      name:
        type: string
    required:
    - id
    - name
    type: object
  model.CategoryIn:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  model.Collection:
    properties:
      categories:
        items:
          type: integer
        type: array
      citation_template:
        type: string
      detailPrivacy:
        type: string
      fields:
        items:
          $ref: '#/definitions/model.CollectionField'
        type: array
      genderHeader:
        type: string
      householdNumberHeader:
        type: string
      householdRelationshipHeader:
        type: string
      id:
        example: 999
        type: integer
      imagePathHeader:
        type: string
      imagePrivacy:
        type: string
      indexPrivacy:
        type: string
      insert_time:
        type: string
      last_update_time:
        type: string
      location:
        type: string
      mappings:
        items:
          $ref: '#/definitions/model.CollectionMapping'
        type: array
      name:
        type: string
    required:
    - categories
    - id
    - name
    type: object
  model.CollectionField:
    properties:
      header:
        type: string
    type: object
  model.CollectionIn:
    properties:
      categories:
        items:
          type: integer
        type: array
      citation_template:
        type: string
      detailPrivacy:
        type: string
      fields:
        items:
          $ref: '#/definitions/model.CollectionField'
        type: array
      genderHeader:
        type: string
      householdNumberHeader:
        type: string
      householdRelationshipHeader:
        type: string
      imagePathHeader:
        type: string
      imagePrivacy:
        type: string
      indexPrivacy:
        type: string
      location:
        type: string
      mappings:
        items:
          $ref: '#/definitions/model.CollectionMapping'
        type: array
      name:
        type: string
    required:
    - categories
    - name
    type: object
  model.CollectionMapping:
    properties:
      dbField:
        type: string
      header:
        type: string
      ixField:
        type: string
      ixRole:
        type: string
    type: object
  model.Error:
    properties:
      code:
        type: string
      message:
        type: string
      params:
        items:
          type: string
        type: array
    type: object
  model.Invitation:
    properties:
      code:
        type: string
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      last_update_time:
        type: string
      level:
        type: integer
      name:
        type: string
      societyId:
        type: integer
    required:
    - code
    - id
    - level
    - name
    - societyId
    type: object
  model.InvitationIn:
    properties:
      code:
        type: string
      level:
        type: integer
      name:
        type: string
      societyId:
        type: integer
    required:
    - code
    - level
    - name
    - societyId
    type: object
  model.Place:
    properties:
      alsoLocatedInIds:
        $ref: '#/definitions/model.Uint32Slice'
        type: object
      altNames:
        $ref: '#/definitions/model.StringSlice'
        type: object
      count:
        type: integer
      countryId:
        type: integer
      fullName:
        type: string
      id:
        type: integer
      insert_time:
        type: string
      last_update_time:
        type: string
      latitude:
        type: number
      level:
        type: integer
      locatedInId:
        type: integer
      longitude:
        type: number
      name:
        type: string
      types:
        $ref: '#/definitions/model.StringSlice'
        type: object
    type: object
  model.Post:
    properties:
      collection:
        example: 999
        type: integer
      id:
        example: 999
        type: integer
      imagesError:
        type: string
      imagesKeys:
        $ref: '#/definitions/model.StringSet'
        type: object
      imagesStatus:
        type: string
      insert_time:
        type: string
      last_update_time:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      postError:
        type: string
      postStatus:
        type: string
      recordsError:
        type: string
      recordsKey:
        type: string
      recordsStatus:
        type: string
    required:
    - collection
    - id
    - name
    type: object
  model.PostIn:
    properties:
      collection:
        example: 999
        type: integer
      imagesError:
        type: string
      imagesKeys:
        $ref: '#/definitions/model.StringSet'
        type: object
      imagesStatus:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      postError:
        type: string
      postStatus:
        type: string
      recordsError:
        type: string
      recordsKey:
        type: string
      recordsStatus:
        type: string
    required:
    - collection
    - name
    type: object
  model.Record:
    properties:
      data:
        additionalProperties:
          type: string
        type: object
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      ix_hash:
        type: string
      last_update_time:
        type: string
      post:
        example: 999
        type: integer
    required:
    - data
    - id
    - post
    type: object
  model.SearchEvent:
    properties:
      date:
        type: string
      place:
        type: string
      type:
        type: string
    type: object
  model.SearchFacet:
    properties:
      buckets:
        items:
          $ref: '#/definitions/model.SearchFacetBucket'
        type: array
      errorUpperBound:
        type: integer
      otherDocCount:
        type: integer
    type: object
  model.SearchFacetBucket:
    properties:
      count:
        type: integer
      label:
        type: string
    type: object
  model.SearchHit:
    properties:
      citation:
        description: only returned on search by id
        type: string
      collection:
        type: integer
      collectionLocation:
        description: only returned on search by id
        type: string
      collectionName:
        type: string
      household:
        description: only returned on search by id
        items:
          $ref: '#/definitions/model.SearchRecord'
        type: array
      id:
        type: string
      imagePath:
        type: string
      person:
        $ref: '#/definitions/model.SearchPerson'
        type: object
      post:
        type: integer
      record:
        $ref: '#/definitions/model.SearchRecord'
        description: only returned on search by id
        type: object
      score:
        type: number
      societyId:
        type: integer
    type: object
  model.SearchLabelValue:
    properties:
      label:
        type: string
      value:
        type: string
    type: object
  model.SearchPerson:
    properties:
      events:
        items:
          $ref: '#/definitions/model.SearchEvent'
        type: array
      name:
        type: string
      relationships:
        items:
          $ref: '#/definitions/model.SearchRelationship'
        type: array
      role:
        type: string
    type: object
  model.SearchRecord:
    items:
      $ref: '#/definitions/model.SearchLabelValue'
    type: array
  model.SearchRelationship:
    properties:
      name:
        type: string
      type:
        type: string
    type: object
  model.SearchResult:
    properties:
      facets:
        additionalProperties:
          $ref: '#/definitions/model.SearchFacet'
        type: object
      hits:
        items:
          $ref: '#/definitions/model.SearchHit'
        type: array
      maxScore:
        type: number
      total:
        type: integer
    type: object
  model.SettingsPostMetadata:
    properties:
      name:
        type: string
      tooltip:
        type: string
      type:
        type: string
    type: object
  model.Society:
    properties:
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      last_update_time:
        type: string
      loginURL:
        type: string
      name:
        type: string
      postMetadata:
        items:
          $ref: '#/definitions/model.SettingsPostMetadata'
        type: array
      secretKey:
        type: string
    required:
    - id
    - name
    - secretKey
    type: object
  model.SocietyIn:
    properties:
      loginURL:
        type: string
      name:
        type: string
      postMetadata:
        items:
          $ref: '#/definitions/model.SettingsPostMetadata'
        type: array
      secretKey:
        type: string
    required:
    - name
    - secretKey
    type: object
  model.SocietySummary:
    properties:
      id:
        example: 999
        type: integer
      name:
        type: string
    required:
    - id
    - name
    type: object
  model.SocietyUser:
    properties:
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      last_update_time:
        type: string
      level:
        type: integer
      societyId:
        type: integer
      userId:
        type: integer
    required:
    - id
    - level
    - societyId
    - userId
    type: object
  model.StringSet:
    items:
      type: string
    type: array
  model.StringSlice:
    items:
      type: string
    type: array
  model.Uint32Slice:
    items:
      type: integer
    type: array
host: api.ourroots.org
info:
  contact:
    email: jim@anconafamily.com
    name: Jim Ancona
    url: https://github.com/jancona
  description: This is the OurRoots API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: OurRoots API
  version: 0.1.0
paths:
  /categories:
    get:
      operationId: getCategories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      operationId: addCategory
      parameters:
      - description: Add Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.CategoryIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Category
      tags:
      - categories
  /categories/{id}:
    delete:
      operationId: deleteCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a Category
      tags:
      - categories
    get:
      operationId: getCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Category
      tags:
      - categories
    put:
      consumes:
      - application/json
      operationId: updateCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a Category
      tags:
      - categories
  /collections:
    get:
      operationId: getCollections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Collection'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all collections
      tags:
      - collections
    post:
      consumes:
      - application/json
      operationId: addCollection
      parameters:
      - description: Add Collection
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/model.CollectionIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Collection
      tags:
      - collections
  /collections/{id}:
    delete:
      operationId: deleteCollection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a Collection
      tags:
      - collections
    get:
      operationId: getCollection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Collection
      tags:
      - collections
    put:
      consumes:
      - application/json
      operationId: updateCollection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Collection
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/model.Collection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a Collection
      tags:
      - collections
  /content:
    post:
      consumes:
      - application/json
      operationId: postContentRequest
      parameters:
      - description: Create content request
        in: body
        name: contentRequest
        required: true
        schema:
          $ref: '#/definitions/api.ContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns a URL for uploading content
      tags:
      - content
  /currentuser:
    get:
      operationId: getCurrentUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Place'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns the current user
      tags:
      - users
  /invitations/{code}:
    get:
      operationId: getInvitation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.InvitationSocietyName'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets an Invitation
      tags:
      - invitations
    post:
      consumes:
      - application/json
      operationId: acceptInvitation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SocietyUser'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: accept an invitation
      tags:
      - invitations
  /places:
    get:
      operationId: getPlacesByPrefix
      parameters:
      - description: place prefix
        in: query
        name: prefix
        type: string
      - description: maximum number of places to return
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Place'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns places matching prefix
      tags:
      - places
  /posts:
    get:
      operationId: getPosts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Post'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      operationId: addPost
      parameters:
      - description: Add Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.PostIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Post
      tags:
      - posts
  /posts/{id}:
    delete:
      operationId: deletePost
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a Post
      tags:
      - posts
    get:
      operationId: getPost
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Post
      tags:
      - posts
    put:
      consumes:
      - application/json
      operationId: updatePost
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a Post
      tags:
      - posts
  /posts/{id}/images/{filePath}:
    get:
      operationId: getPostImage
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image file path
        in: path
        name: imageFile
        required: true
        type: string
      - description: return the url as json {url, height, width} if true
        in: query
        name: noredirect
        type: boolean
      - description: return thumbnail
        in: query
        name: thumbnail
        type: boolean
      responses:
        "307":
          description: Temporary Redirect
          schema:
            type: header
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: Returns a redirect to an image URL
      tags:
      - posts
  /records:
    get:
      operationId: getRecords
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.RecordsResult'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all records
      tags:
      - records
  /records/{id}:
    get:
      operationId: getRecord
      parameters:
      - description: Record ID
        in: path
        name: id
        required: true
        type: integer
      - description: include labels, citation, household, and imagePath
        in: query
        name: details
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RecordDetail'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Record with optional detail including household records and
        image path
      tags:
      - posts
  /search:
    get:
      description: |-
        * Names can include wildcards (* or ?), in which case name fuzziness above Exact is ignored
        * Date searching is limited to passing in a single year; use fuzziness for ranges
        * Name fuzziness flags (OR'd together): 0: default; 1: exact; 2: variant spellings; 4: narrow sounds-like; 8: broad sounds-like; 16: fuzzy (levenshtein); 32: initials (applies only to given)
        * Date fuzziness: 0: default; 1: exact to this year; 2: +/- 1 year; 3: +/- 2 years; 4: +/- 5 years; 5: +/- 10 years
        * Places can include wildcards (* or ?) or ~word to fuzzy-match word, in which case place fuzziness above Exact is ignored
        * Place fuzziness flags (OR'd together): 0: default; 1: exact only; 2: include higher-level jurisdictions;
        * Category and collection facets: to start set categoryFacet true. If the user selects a value from the returned list, set that value as the category filter and set collectionFacet true
        * Date and place faceting are in a state of flux currently and may not be supported in the future depending upon user interest; do not use
        * Date facets: to start set century faceting to true. If the user selects a value from the returned list, set that value as the century filter and set decade faceting to true. If the user selects a decade, set that value as the decade filter
        * Place facets: to start, set level 1 faceting to true. If the user selects a value from the returned list, set that value as the level 1 filter and set level 2 faceting to true. Continue up to level 3
      operationId: search
      parameters:
      - description: principal given and middle names
        in: query
        name: given
        type: string
      - description: principal given name fuzziness flags
        in: query
        name: givenFuzziness
        type: integer
      - description: principal surname(s)
        in: query
        name: surname
        type: string
      - description: principal surname fuzziness flags
        in: query
        name: surnameFuzziness
        type: integer
      - description: father given and middle names
        in: query
        name: fatherGiven
        type: string
      - description: father given name fuzziness flags
        in: query
        name: fatherGivenFuzziness
        type: integer
      - description: father surname(s)
        in: query
        name: fatherSurname
        type: string
      - description: father surname fuzziness flags
        in: query
        name: fatherSurnameFuzziness
        type: integer
      - description: mother given and middle names
        in: query
        name: motherGiven
        type: string
      - description: mother given name fuzziness flags
        in: query
        name: motherGivenFuzziness
        type: integer
      - description: mother surname(s)
        in: query
        name: motherSurname
        type: string
      - description: mother surname fuzziness flags
        in: query
        name: motherSurnameFuzziness
        type: integer
      - description: spouse given and middle names
        in: query
        name: spouseGiven
        type: string
      - description: spouse given name fuzziness flags
        in: query
        name: spouseGivenFuzziness
        type: integer
      - description: spouse surname(s)
        in: query
        name: spouseSurname
        type: string
      - description: spouse surname fuzziness flags
        in: query
        name: spouseSurnameFuzziness
        type: integer
      - description: other person given and middle names
        in: query
        name: otherGiven
        type: string
      - description: other person given name fuzziness flags
        in: query
        name: otherGivenFuzziness
        type: integer
      - description: other person surname(s)
        in: query
        name: otherSurname
        type: string
      - description: other person surname fuzziness flags
        in: query
        name: otherSurnameFuzziness
        type: integer
      - description: date
        in: query
        name: birthDate
        type: string
      - description: +/- year range
        in: query
        name: birthDateFuzziness
        type: integer
      - description: place
        in: query
        name: birthPlace
        type: string
      - description: fuzziness flags
        in: query
        name: birthPlaceFuzziness
        type: integer
      - description: date
        in: query
        name: marriageDate
        type: string
      - description: +/- year range
        in: query
        name: marriageDateFuzziness
        type: integer
      - description: place
        in: query
        name: marriagePlace
        type: string
      - description: fuzziness flags
        in: query
        name: marriagePlaceFuzziness
        type: integer
      - description: date
        in: query
        name: residenceDate
        type: string
      - description: +/- year range
        in: query
        name: residenceDateFuzziness
        type: integer
      - description: place
        in: query
        name: residencePlace
        type: string
      - description: fuzziness flags
        in: query
        name: residencePlaceFuzziness
        type: integer
      - description: date
        in: query
        name: deathDate
        type: string
      - description: +/- year range
        in: query
        name: deathDateFuzziness
        type: integer
      - description: place
        in: query
        name: deathPlace
        type: string
      - description: fuzziness flags
        in: query
        name: deathPlaceFuzziness
        type: integer
      - description: date
        in: query
        name: anyDate
        type: string
      - description: +/- year range
        in: query
        name: anyDateFuzziness
        type: integer
      - description: place
        in: query
        name: anyPlace
        type: string
      - description: fuzziness flags
        in: query
        name: anyPlaceFuzziness
        type: integer
      - description: text search on the keywords field
        in: query
        name: keywords
        type: string
      - description: facet on collection location level 1
        in: query
        name: collectionPlace1Facet
        type: boolean
      - description: filter on collection location level 1
        in: query
        name: collectionPlace1
        type: string
      - description: facet on collection location level 2
        in: query
        name: collectionPlace2Facet
        type: boolean
      - description: filter on collection location level 2
        in: query
        name: collectionPlace2
        type: string
      - description: facet on collection location level 3
        in: query
        name: collectionPlace3Facet
        type: boolean
      - description: filter on collection location level 3
        in: query
        name: collectionPlace3
        type: string
      - description: facet on category
        in: query
        name: categoryFacet
        type: boolean
      - description: filter on category
        in: query
        name: category
        type: string
      - description: facet on collection
        in: query
        name: collectionFacet
        type: boolean
      - description: filter on collection
        in: query
        name: collection
        type: string
      - description: starting result to return (default 0, max 1000)
        in: query
        name: from
        type: integer
      - description: number of results to return (default 10, max 100)
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.SearchResult'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      summary: returns search results
      tags:
      - search
  /search/{id}:
    get:
      operationId: searchByID
      parameters:
      - description: Search Result ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SearchHit'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      summary: returns a single search result
      tags:
      - search
  /societies:
    post:
      consumes:
      - application/json
      operationId: addSociety
      parameters:
      - description: Add Society
        in: body
        name: society
        required: true
        schema:
          $ref: '#/definitions/model.SocietyIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Society'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Society
      tags:
      - societies
  /societies/{id}:
    delete:
      operationId: deleteSociety
      parameters:
      - description: Society ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a Society
      tags:
      - societies
    put:
      consumes:
      - application/json
      operationId: updateSociety
      parameters:
      - description: Society ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Society
        in: body
        name: society
        required: true
        schema:
          $ref: '#/definitions/model.Society'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Society'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a Society
      tags:
      - societies
  /societies/{society}:
    get:
      operationId: getSociety
      parameters:
      - description: Society ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Society'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Society
      tags:
      - societies
  /societies/{society}/current_user:
    get:
      operationId: getCurrentSocietyUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.SocietyUser'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns the current SocietyUser
      tags:
      - societyUsers
  /societies/{society}/invitations:
    get:
      operationId: getInvitations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Invitation'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all invitations
      tags:
      - invitations
    post:
      consumes:
      - application/json
      operationId: addInvitation
      parameters:
      - description: Add Invitation
        in: body
        name: society
        required: true
        schema:
          $ref: '#/definitions/model.InvitationIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Invitation'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Invitation
      tags:
      - invitations
  /societies/{society}/invitations/{id}:
    delete:
      operationId: deleteInvitation
      parameters:
      - description: Invitation ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes an Invitation
      tags:
      - invitations
  /societies/{society}/users:
    get:
      operationId: getUsers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.SocietyUserName'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all users
      tags:
      - societyUsers
  /societies/{society}/users/{id}:
    delete:
      operationId: deleteSocietyUSer
      parameters:
      - description: SocietyUser ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a SocietyUser
      tags:
      - societyUsers
    put:
      consumes:
      - application/json
      operationId: updateSocietyUser
      parameters:
      - description: SocietyUser ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update SocietyUser
        in: body
        name: society
        required: true
        schema:
          $ref: '#/definitions/api.SocietyUserName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SocietyUserName'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a SocietyUser
      tags:
      - societyUsers
  /society_summaries:
    get:
      operationId: getSocietySummaries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.SocietySummary'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all society summaries for the current user
      tags:
      - societies
  /society_summaries/{society}:
    get:
      operationId: getSocietySummary
      parameters:
      - description: Society ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SocietySummary'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a SocietySummary
      tags:
      - societies
schemes:
- http
- https
securityDefinitions:
  OAuth2Implicit:
    authorizationUrl: https://ourroots.auth0.com/authorize?audience=https%3A%2F%2Fapi.ourroots.org%2Fpreprod
    flow: implicit
    scopes:
      cms: ' Grants read and write access to the CMS'
      email: ' Grants access to OIDC email attributes'
      openid: ' Indicates that the application intends to use OIDC to verify the user''s
        identity'
      profile: ' Grants access to OIDC user profile attributes'
    type: oauth2
swagger: "2.0"
