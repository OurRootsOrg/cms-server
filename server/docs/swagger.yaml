basePath: /
definitions:
  api.ContentRequest:
    properties:
      contentType:
        type: string
    type: object
  api.Error:
    type: object
  model.Category:
    properties:
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      last_update_time:
        type: string
      name:
        type: string
    required:
    - id
    - name
    type: object
  model.CategoryIn:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  model.Collection:
    properties:
      categories:
        items:
          type: integer
        type: array
      citation_template:
        type: string
      fields:
        items:
          $ref: '#/definitions/model.CollectionField'
        type: array
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      last_update_time:
        type: string
      location:
        type: string
      mappings:
        items:
          $ref: '#/definitions/model.CollectionMapping'
        type: array
      name:
        type: string
    required:
    - categories
    - id
    - name
    type: object
  model.CollectionField:
    properties:
      header:
        type: string
      regex:
        type: string
      regexError:
        type: string
      required:
        type: boolean
    type: object
  model.CollectionIn:
    properties:
      categories:
        items:
          type: integer
        type: array
      citation_template:
        type: string
      fields:
        items:
          $ref: '#/definitions/model.CollectionField'
        type: array
      location:
        type: string
      mappings:
        items:
          $ref: '#/definitions/model.CollectionMapping'
        type: array
      name:
        type: string
    required:
    - categories
    - name
    type: object
  model.CollectionMapping:
    properties:
      dbField:
        type: string
      header:
        type: string
      ixField:
        type: string
      ixRole:
        type: string
    type: object
  model.Error:
    properties:
      code:
        type: string
      message:
        type: string
      params:
        items:
          type: string
        type: array
    type: object
  model.Post:
    properties:
      collection:
        example: 999
        type: integer
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      last_update_time:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      recordsKey:
        type: string
      recordsStatus:
        type: string
    required:
    - collection
    - id
    - name
    type: object
  model.PostIn:
    properties:
      collection:
        example: 999
        type: integer
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      recordsKey:
        type: string
      recordsStatus:
        type: string
    required:
    - collection
    - name
    type: object
  model.Record:
    properties:
      data:
        additionalProperties:
          type: string
        type: object
      id:
        example: 999
        type: integer
      insert_time:
        type: string
      ix_hash:
        type: string
      last_update_time:
        type: string
      post:
        example: 999
        type: integer
    required:
    - data
    - id
    - post
    type: object
  model.SearchEvent:
    properties:
      date:
        type: string
      place:
        type: string
      type:
        type: string
    type: object
  model.SearchHit:
    properties:
      collection:
        type: integer
      collectionName:
        type: string
      id:
        type: string
      person:
        $ref: '#/definitions/model.SearchPerson'
        type: object
      record:
        $ref: '#/definitions/model.SearchRecord'
        description: only returned on search by id
        type: object
      score:
        type: number
    type: object
  model.SearchLabelValue:
    properties:
      label:
        type: string
      value:
        type: string
    type: object
  model.SearchPerson:
    properties:
      events:
        items:
          $ref: '#/definitions/model.SearchEvent'
        type: array
      name:
        type: string
      relationships:
        items:
          $ref: '#/definitions/model.SearchRelationship'
        type: array
      role:
        type: string
    type: object
  model.SearchRecord:
    items:
      $ref: '#/definitions/model.SearchLabelValue'
    type: array
  model.SearchRelationship:
    properties:
      name:
        type: string
      type:
        type: string
    type: object
  model.SearchResult:
    properties:
      hits:
        items:
          $ref: '#/definitions/model.SearchHit'
        type: array
      maxScore:
        type: number
      total:
        type: integer
    type: object
  model.Settings:
    properties:
      insert_time:
        type: string
      last_update_time:
        type: string
      postMetadata:
        items:
          $ref: '#/definitions/model.SettingsPostMetadata'
        type: array
    type: object
  model.SettingsPostMetadata:
    properties:
      name:
        type: string
      tooltip:
        type: string
      type:
        type: string
    type: object
host: api.ourroots.org
info:
  contact:
    email: jim@anconafamily.com
    name: Jim Ancona
    url: https://github.com/jancona
  description: This is the OurRoots API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: OurRoots API
  version: 0.1.0
paths:
  /categories:
    get:
      operationId: getCategories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      operationId: addCategory
      parameters:
      - description: Add Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.CategoryIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Category
      tags:
      - categories
  /categories/{id}:
    delete:
      operationId: deleteCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a Category
      tags:
      - categories
    get:
      operationId: getCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Category
      tags:
      - categories
    put:
      consumes:
      - application/json
      operationId: updateCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a Category
      tags:
      - categories
  /collections:
    get:
      operationId: getCollections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Collection'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all collections
      tags:
      - collections
    post:
      consumes:
      - application/json
      operationId: addCollection
      parameters:
      - description: Add Collection
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/model.CollectionIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Collection
      tags:
      - collections
  /collections/{id}:
    delete:
      operationId: deleteCollection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a Collection
      tags:
      - collections
    get:
      operationId: getCollection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Collection
      tags:
      - collections
    put:
      consumes:
      - application/json
      operationId: updateCollection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Collection
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/model.Collection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a Collection
      tags:
      - collections
  /content:
    post:
      consumes:
      - application/json
      operationId: postContentRequest
      parameters:
      - description: Create content request
        in: body
        name: contentRequest
        required: true
        schema:
          $ref: '#/definitions/api.ContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns a URL for uploading content
      tags:
      - content
  /posts:
    get:
      operationId: getSettings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Settings'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns goobal settings
      tags:
      - settings
    post:
      consumes:
      - application/json
      operationId: addPost
      parameters:
      - description: Add Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.PostIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Post
      tags:
      - posts
  /posts/{id}:
    delete:
      operationId: deletePost
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a Post
      tags:
      - posts
    get:
      operationId: getPost
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Post
      tags:
      - posts
    put:
      consumes:
      - application/json
      operationId: updatePost
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a Post
      tags:
      - posts
  /records:
    get:
      operationId: getRecords
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Record'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all records
      tags:
      - records
  /search:
    get:
      description: |-
        * Names can include wildcards (* or ?). In that case name fuzziness is ignored
        * Date and place searching are not yet implemented. They will be implemented in August.
        * Name fuzziness flags (OR'd together): 0: exact only; 1: alternate spellings; 2: narrow sounds-like; 4: broad sounds-like; 8: fuzzy (levenshtein); 16: initials (applies only to given)
        * Date fuzziness: +/- number of years to generate a year range
        * Place fuzziness flags (OR'd together): 0: exact only; 1: include higher-level jurisdictions; 2: include nearby places
        * Date facets: to start set century faceting to true. If ht user selects a value from the returned list, set that value as the century filter and set decade faceting to true. If the user selects a decade, set that value as the decade filter
        * Place facets: to start, set level 1 faceting to true. If the user selects a value from the returned list, set that value as the level 1 filter and set level 2 faceting to true. Continue up to level 3
      operationId: search
      parameters:
      - description: principal given and middle names
        in: query
        name: given
        type: string
      - description: principal given name fuzziness flags
        in: query
        name: givenFuzziness
        type: integer
      - description: principal surname(s)
        in: query
        name: surname
        type: string
      - description: principal surname fuzziness flags
        in: query
        name: surnameFuzziness
        type: integer
      - description: father given and middle names
        in: query
        name: fatherGiven
        type: string
      - description: father given name fuzziness flags
        in: query
        name: fatherGivenFuzziness
        type: integer
      - description: father surname(s)
        in: query
        name: fatherSurname
        type: string
      - description: father surname fuzziness flags
        in: query
        name: fatherFuzziness
        type: integer
      - description: mother given and middle names
        in: query
        name: motherGiven
        type: string
      - description: mother given name fuzziness flags
        in: query
        name: motherGivenFuzziness
        type: integer
      - description: mother surname(s)
        in: query
        name: motherSurname
        type: string
      - description: mother surname fuzziness flags
        in: query
        name: motherFuzziness
        type: integer
      - description: spouse given and middle names
        in: query
        name: spouseGiven
        type: string
      - description: spouse given name fuzziness flags
        in: query
        name: spouseGivenFuzziness
        type: integer
      - description: spouse surname(s)
        in: query
        name: spouseSurname
        type: string
      - description: spouse surname fuzziness flags
        in: query
        name: spouseFuzziness
        type: integer
      - description: other person given and middle names
        in: query
        name: otherGiven
        type: string
      - description: other person given name fuzziness flags
        in: query
        name: otherGivenFuzziness
        type: integer
      - description: other person surname(s)
        in: query
        name: otherSurname
        type: string
      - description: other person surname fuzziness flags
        in: query
        name: otherSurnameFuzziness
        type: integer
      - description: date
        in: query
        name: birthDate
        type: string
      - description: +/- year range
        in: query
        name: birthDateFuzziness
        type: integer
      - description: place
        in: query
        name: birthPlace
        type: string
      - description: fuzziness flags
        in: query
        name: birthPlaceFuzziness
        type: integer
      - description: date
        in: query
        name: marriageDate
        type: string
      - description: +/- year range
        in: query
        name: marriageDateFuzziness
        type: integer
      - description: place
        in: query
        name: marriagePlace
        type: string
      - description: fuzziness flags
        in: query
        name: marriagePlaceFuzziness
        type: integer
      - description: date
        in: query
        name: residenceDate
        type: string
      - description: +/- year range
        in: query
        name: residenceDateFuzziness
        type: integer
      - description: place
        in: query
        name: residencePlace
        type: string
      - description: fuzziness flags
        in: query
        name: residencePlaceFuzziness
        type: integer
      - description: date
        in: query
        name: deathDate
        type: string
      - description: +/- year range
        in: query
        name: deathDateFuzziness
        type: integer
      - description: place
        in: query
        name: deathPlace
        type: string
      - description: fuzziness flags
        in: query
        name: deathPlaceFuzziness
        type: integer
      - description: date
        in: query
        name: anyDate
        type: string
      - description: +/- year range
        in: query
        name: anyDateFuzziness
        type: integer
      - description: place
        in: query
        name: anyPlace
        type: string
      - description: fuzziness flags
        in: query
        name: anyPlaceFuzziness
        type: integer
      - description: text search on the keywords field
        in: query
        name: keywords
        type: string
      - description: facet on century
        in: query
        name: birthCenturyFacet
        type: boolean
      - description: filter on century
        in: query
        name: birthCentury
        type: string
      - description: facet on decade
        in: query
        name: birthDecadeFacet
        type: boolean
      - description: filter on decade
        in: query
        name: birthDecade
        type: string
      - description: facet on place level 1
        in: query
        name: birthPlace1Facet
        type: boolean
      - description: filter on place level 1
        in: query
        name: birthPlace1
        type: string
      - description: facet on place level 2
        in: query
        name: birthPlace2Facet
        type: boolean
      - description: filter on place level 2
        in: query
        name: birthPlace2
        type: string
      - description: facet on place level 3
        in: query
        name: birthPlace3Facet
        type: boolean
      - description: filter on place level 3
        in: query
        name: birthPlace3
        type: string
      - description: facet on century
        in: query
        name: marriageCenturyFacet
        type: boolean
      - description: filter on century
        in: query
        name: marriageCentury
        type: string
      - description: facet on decade
        in: query
        name: marriageDecadeFacet
        type: boolean
      - description: filter on decade
        in: query
        name: marriageDecade
        type: string
      - description: facet on place level 1
        in: query
        name: marriagePlace1Facet
        type: boolean
      - description: filter on place level 1
        in: query
        name: marriagePlace1
        type: string
      - description: facet on place level 2
        in: query
        name: marriagePlace2Facet
        type: boolean
      - description: filter on place level 2
        in: query
        name: marriagePlace2
        type: string
      - description: facet on place level 3
        in: query
        name: marriagePlace3Facet
        type: boolean
      - description: filter on place level 3
        in: query
        name: marriagePlace3
        type: string
      - description: facet on century
        in: query
        name: residenceCenturyFacet
        type: boolean
      - description: filter on century
        in: query
        name: residenceCentury
        type: string
      - description: facet on decade
        in: query
        name: residenceDecadeFacet
        type: boolean
      - description: filter on decade
        in: query
        name: residenceDecade
        type: string
      - description: facet on place level 1
        in: query
        name: residencePlace1Facet
        type: boolean
      - description: filter on place level 1
        in: query
        name: residencePlace1
        type: string
      - description: facet on place level 2
        in: query
        name: residencePlace2Facet
        type: boolean
      - description: filter on place level 2
        in: query
        name: residencePlace2
        type: string
      - description: facet on place level 3
        in: query
        name: residencePlace3Facet
        type: boolean
      - description: filter on place level 3
        in: query
        name: residencePlace3
        type: string
      - description: facet on century
        in: query
        name: deathCenturyFacet
        type: boolean
      - description: filter on century
        in: query
        name: deathCentury
        type: string
      - description: facet on decade
        in: query
        name: deathDecadeFacet
        type: boolean
      - description: filter on decade
        in: query
        name: deathDecade
        type: string
      - description: facet on place level 1
        in: query
        name: deathPlace1Facet
        type: boolean
      - description: filter on place level 1
        in: query
        name: deathPlace1
        type: string
      - description: facet on place level 2
        in: query
        name: deathPlace2Facet
        type: boolean
      - description: filter on place level 2
        in: query
        name: deathPlace2
        type: string
      - description: facet on place level 3
        in: query
        name: deathPlace3Facet
        type: boolean
      - description: filter on place level 3
        in: query
        name: deathPlace3
        type: string
      - description: facet on century
        in: query
        name: otherCenturyFacet
        type: boolean
      - description: filter on century
        in: query
        name: otherCentury
        type: string
      - description: facet on decade
        in: query
        name: otherDecadeFacet
        type: boolean
      - description: filter on decade
        in: query
        name: otherDecade
        type: string
      - description: facet on place level 1
        in: query
        name: otherPlace1Facet
        type: boolean
      - description: filter on place level 1
        in: query
        name: otherPlace1
        type: string
      - description: facet on place level 2
        in: query
        name: otherPlace2Facet
        type: boolean
      - description: filter on place level 2
        in: query
        name: otherPlace2
        type: string
      - description: facet on place level 3
        in: query
        name: otherPlace3Facet
        type: boolean
      - description: filter on place level 3
        in: query
        name: otherPlace3
        type: string
      - description: facet on category
        in: query
        name: categoryFacet
        type: boolean
      - description: filter on category
        in: query
        name: category
        type: string
      - description: facet on collection
        in: query
        name: collectionFacet
        type: boolean
      - description: filter on collection
        in: query
        name: collection
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.SearchResult'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      summary: returns search results
      tags:
      - search
  /search/{id}:
    get:
      operationId: searchByID
      parameters:
      - description: Search Result ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SearchHit'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      summary: returns a single search result
      tags:
      - search
  /settings:
    put:
      consumes:
      - application/json
      operationId: updateSettings
      parameters:
      - description: Update Settings
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Settings'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates settings
      tags:
      - settings
schemes:
- http
- https
securityDefinitions:
  OAuth2Implicit:
    authorizationUrl: https://ourroots.auth0.com/authorize?audience=https%3A%2F%2Fapi.ourroots.org%2Fpreprod
    flow: implicit
    scopes:
      cms: ' Grants read and write access to the CMS'
      email: ' Grants access to OIDC email attributes'
      openid: ' Indicates that the application intends to use OIDC to verify the user''s
        identity'
      profile: ' Grants access to OIDC user profile attributes'
    type: oauth2
swagger: "2.0"
