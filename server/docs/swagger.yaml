basePath: /
definitions:
  api.ContentRequest:
    properties:
      contentType:
        type: string
    type: object
  model.Category:
    properties:
      details_page_template:
        type: string
      field_defs:
        $ref: '#/definitions/model.FieldDefSet'
        description: example:"{\"int_field\":\"Int\", \"string_field\":\"String\"}"
        type: object
      id:
        example: /categories/999
        type: string
      insert_time:
        type: string
      last_update_time:
        type: string
      name:
        type: string
      search_results_page_template:
        type: string
    required:
    - id
    - name
    type: object
  model.CategoryIn:
    properties:
      details_page_template:
        type: string
      field_defs:
        $ref: '#/definitions/model.FieldDefSet'
        description: example:"{\"int_field\":\"Int\", \"string_field\":\"String\"}"
        type: object
      name:
        type: string
      search_results_page_template:
        type: string
    required:
    - name
    type: object
  model.Collection:
    properties:
      category:
        example: /categories/999
        type: string
      citation_template:
        type: string
      id:
        example: /collections/999
        type: string
      insert_time:
        type: string
      last_update_time:
        type: string
      location:
        type: string
      name:
        type: string
    required:
    - category
    - id
    - name
    type: object
  model.CollectionIn:
    properties:
      category:
        example: /categories/999
        type: string
      citation_template:
        type: string
      location:
        type: string
      name:
        type: string
    required:
    - category
    - name
    type: object
  model.Errors:
    type: object
  model.FieldDef:
    properties:
      csv_heading:
        type: string
      name:
        type: string
      type:
        enum:
        - Int
        - String
        - Image
        - Location
        - Time
        type: string
    type: object
  model.FieldDefSet:
    items:
      $ref: '#/definitions/model.FieldDef'
    type: array
  model.Post:
    properties:
      collection:
        example: /collections/999
        type: string
      id:
        example: /posts/999
        type: string
      insert_time:
        type: string
      last_update_time:
        type: string
      name:
        type: string
      recordsKey:
        type: string
      recordsStatus:
        type: string
    required:
    - collection
    - id
    - name
    - recordsKey
    type: object
  model.PostIn:
    properties:
      collection:
        example: /collections/999
        type: string
      name:
        type: string
      recordsKey:
        type: string
      recordsStatus:
        type: string
    required:
    - collection
    - name
    - recordsKey
    type: object
host: api.ourroots.org
info:
  contact:
    email: jim@anconafamily.com
    name: Jim Ancona
    url: https://github.com/jancona
  description: This is the OurRoots API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: OurRoots API
  version: 0.1.0
paths:
  /categories:
    get:
      operationId: getCategories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      operationId: addCategory
      parameters:
      - description: Add Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.CategoryIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/model.Errors'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Category
      tags:
      - categories
  /categories/{id}:
    delete:
      operationId: deleteCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a Category
      tags:
      - categories
    get:
      operationId: getCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Errors'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Category
      tags:
      - categories
    put:
      consumes:
      - application/json
      operationId: updateCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/model.Errors'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a Category
      tags:
      - categories
  /collections:
    get:
      operationId: getCollections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Collection'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all collections
      tags:
      - collections
    post:
      consumes:
      - application/json
      operationId: addCollection
      parameters:
      - description: Add Collection
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/model.CollectionIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/model.Errors'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Collection
      tags:
      - collections
  /collections/{id}:
    delete:
      operationId: deleteCollection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a Collection
      tags:
      - collections
    get:
      operationId: getCollection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Errors'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Collection
      tags:
      - collections
    put:
      consumes:
      - application/json
      operationId: updateCollection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Collection
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/model.Collection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/model.Errors'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a Collection
      tags:
      - collections
  /content:
    post:
      consumes:
      - application/json
      operationId: postContentRequest
      parameters:
      - description: Create content request
        in: body
        name: contentRequest
        required: true
        schema:
          $ref: '#/definitions/api.ContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/model.Errors'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns a URL for uploading content
      tags:
      - content
  /posts:
    get:
      operationId: getPosts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Post'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: returns all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      operationId: addPost
      parameters:
      - description: Add Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.PostIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/model.Errors'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: adds a new Post
      tags:
      - posts
  /posts/{id}:
    delete:
      operationId: deletePost
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: deletes a Post
      tags:
      - posts
    get:
      operationId: getPost
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Errors'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: gets a Post
      tags:
      - posts
    put:
      consumes:
      - application/json
      operationId: updatePost
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "415":
          description: Bad Content-Type
          schema:
            $ref: '#/definitions/model.Errors'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.Errors'
      security:
      - OAuth2Implicit:
        - cms
        - openid
        - profile
        - email
      - OAuth2AuthCode:
        - cms
        - openid
        - profile
        - email
      summary: updates a Post
      tags:
      - posts
schemes:
- http
- https
securityDefinitions:
  OAuth2Implicit:
    authorizationUrl: https://ourroots.auth0.com/authorize?audience=https%3A%2F%2Fapi.ourroots.org%3A3000%2Fpreprod
    flow: implicit
    scopes:
      cms: ' Grants read and write access to the CMS'
      email: ' Grants access to OIDC email attributes'
      openid: ' Indicates that the application intends to use OIDC to verify the user''s
        identity'
      profile: ' Grants access to OIDC user profile attributes'
    type: oauth2
swagger: "2.0"
