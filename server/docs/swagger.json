{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the OurRoots API",
        "title": "OurRoots API",
        "contact": {
            "name": "Jim Ancona",
            "url": "https://github.com/jancona",
            "email": "jim@anconafamily.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "0.1.0"
    },
    "host": "api.ourroots.org",
    "basePath": "/",
    "paths": {
        "/categories": {
            "get": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "returns all categories",
                "operationId": "getCategories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Category"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "adds a new Category",
                "operationId": "addCategory",
                "parameters": [
                    {
                        "description": "Add Category",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CategoryIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "415": {
                        "description": "Bad Content-Type",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "gets a Category",
                "operationId": "getCategory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "updates a Category",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Category",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "415": {
                        "description": "Bad Content-Type",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "tags": [
                    "categories"
                ],
                "summary": "deletes a Category",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/collections": {
            "get": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "returns all collections",
                "operationId": "getCollections",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Collection"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "adds a new Collection",
                "operationId": "addCollection",
                "parameters": [
                    {
                        "description": "Add Collection",
                        "name": "collection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CollectionIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Collection"
                        }
                    },
                    "415": {
                        "description": "Bad Content-Type",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/collections/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "gets a Collection",
                "operationId": "getCollection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Collection"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "updates a Collection",
                "operationId": "updateCollection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Collection",
                        "name": "collection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Collection"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Collection"
                        }
                    },
                    "415": {
                        "description": "Bad Content-Type",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "tags": [
                    "collections"
                ],
                "summary": "deletes a Collection",
                "operationId": "deleteCollection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Collection"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/content": {
            "post": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content"
                ],
                "summary": "returns a URL for uploading content",
                "operationId": "postContentRequest",
                "parameters": [
                    {
                        "description": "Create content request",
                        "name": "contentRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ContentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "415": {
                        "description": "Bad Content-Type",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/currentuser": {
            "get": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "returns the current user",
                "operationId": "getCurrentUser",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Place"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/places": {
            "get": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "places"
                ],
                "summary": "returns places matching prefix",
                "operationId": "getPlacesByPrefix",
                "parameters": [
                    {
                        "type": "string",
                        "description": "place prefix",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "maximum number of places to return",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Place"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "returns goobal settings",
                "operationId": "getSettings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Settings"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "adds a new Post",
                "operationId": "addPost",
                "parameters": [
                    {
                        "description": "Add Post",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PostIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Post"
                        }
                    },
                    "415": {
                        "description": "Bad Content-Type",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/posts/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "gets a Post",
                "operationId": "getPost",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Post"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "updates a Post",
                "operationId": "updatePost",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Post",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Post"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Post"
                        }
                    },
                    "415": {
                        "description": "Bad Content-Type",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "tags": [
                    "posts"
                ],
                "summary": "deletes a Post",
                "operationId": "deletePost",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Post"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/posts/{id}/images/{filePath}": {
            "get": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Returns a redirect to an image URL",
                "operationId": "getPostImage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Image file path",
                        "name": "imageFile",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Temporary Redirect",
                        "schema": {
                            "type": "header"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/records": {
            "get": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "records"
                ],
                "summary": "returns all records",
                "operationId": "getRecords",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Record"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "description": "* Names can include wildcards (* or ?), in which case name fuzziness above Exact is ignored\n* Date searching is limited to passing in a single year; use fuzziness for ranges\n* Name fuzziness flags (OR'd together): 0: default; 1: exact; 2: alternate spellings; 4: narrow sounds-like; 8: broad sounds-like; 16: fuzzy (levenshtein); 32: initials (applies only to given)\n* Date fuzziness: 0: default; 1: exact to this year; 2: +/- 1 year; 3: +/- 2 years; 4: +/- 5 years; 5: +/- 10 years\n* Places can include wildcards (* or ?) or ~word to fuzzy-match word, in which case place fuzziness above Exact is ignored\n* Place fuzziness flags (OR'd together): 0: default; 1: exact only; 2: include higher-level jurisdictions;\n* Category and collection facets: to start set categoryFacet true. If the user selects a value from the returned list, set that value as the category filter and set collectionFacet true\n* Date and place faceting are in a state of flux currently and may not be supported in the future depending upon user interest; do not use\n* Date facets: to start set century faceting to true. If the user selects a value from the returned list, set that value as the century filter and set decade faceting to true. If the user selects a decade, set that value as the decade filter\n* Place facets: to start, set level 1 faceting to true. If the user selects a value from the returned list, set that value as the level 1 filter and set level 2 faceting to true. Continue up to level 3",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "returns search results",
                "operationId": "search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "principal given and middle names",
                        "name": "given",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "principal given name fuzziness flags",
                        "name": "givenFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "principal surname(s)",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "principal surname fuzziness flags",
                        "name": "surnameFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "father given and middle names",
                        "name": "fatherGiven",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "father given name fuzziness flags",
                        "name": "fatherGivenFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "father surname(s)",
                        "name": "fatherSurname",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "father surname fuzziness flags",
                        "name": "fatherFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "mother given and middle names",
                        "name": "motherGiven",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "mother given name fuzziness flags",
                        "name": "motherGivenFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "mother surname(s)",
                        "name": "motherSurname",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "mother surname fuzziness flags",
                        "name": "motherFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "spouse given and middle names",
                        "name": "spouseGiven",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "spouse given name fuzziness flags",
                        "name": "spouseGivenFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "spouse surname(s)",
                        "name": "spouseSurname",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "spouse surname fuzziness flags",
                        "name": "spouseFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "other person given and middle names",
                        "name": "otherGiven",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "other person given name fuzziness flags",
                        "name": "otherGivenFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "other person surname(s)",
                        "name": "otherSurname",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "other person surname fuzziness flags",
                        "name": "otherSurnameFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date",
                        "name": "birthDate",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "+/- year range",
                        "name": "birthDateFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "place",
                        "name": "birthPlace",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "fuzziness flags",
                        "name": "birthPlaceFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date",
                        "name": "marriageDate",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "+/- year range",
                        "name": "marriageDateFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "place",
                        "name": "marriagePlace",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "fuzziness flags",
                        "name": "marriagePlaceFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date",
                        "name": "residenceDate",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "+/- year range",
                        "name": "residenceDateFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "place",
                        "name": "residencePlace",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "fuzziness flags",
                        "name": "residencePlaceFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date",
                        "name": "deathDate",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "+/- year range",
                        "name": "deathDateFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "place",
                        "name": "deathPlace",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "fuzziness flags",
                        "name": "deathPlaceFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date",
                        "name": "anyDate",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "+/- year range",
                        "name": "anyDateFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "place",
                        "name": "anyPlace",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "fuzziness flags",
                        "name": "anyPlaceFuzziness",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "text search on the keywords field",
                        "name": "keywords",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "facet on collection location level 1",
                        "name": "collectionPlace1Facet",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter on collection location level 1",
                        "name": "collectionPlace1",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "facet on collection location level 2",
                        "name": "collectionPlace2Facet",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter on collection location level 2",
                        "name": "collectionPlace2",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "facet on collection location level 3",
                        "name": "collectionPlace3Facet",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter on collection location level 3",
                        "name": "collectionPlace3",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "facet on category",
                        "name": "categoryFacet",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter on category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "facet on collection",
                        "name": "collectionFacet",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter on collection",
                        "name": "collection",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "starting result to return (default 0, max 1000)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of results to return (default 10, max 100)",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.SearchResult"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/search/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "returns a single search result",
                "operationId": "searchByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search Result ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SearchHit"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/settings": {
            "put": {
                "security": [
                    {
                        "OAuth2Implicit": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    },
                    {
                        "OAuth2AuthCode": [
                            "cms",
                            "openid",
                            "profile",
                            "email"
                        ]
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "updates settings",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "description": "Update Settings",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Settings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Settings"
                        }
                    },
                    "415": {
                        "description": "Bad Content-Type",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ContentRequest": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string"
                }
            }
        },
        "api.Error": {
            "type": "object"
        },
        "model.Category": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 999
                },
                "insert_time": {
                    "type": "string"
                },
                "last_update_time": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.CategoryIn": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Collection": {
            "type": "object",
            "required": [
                "categories",
                "id",
                "name"
            ],
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "citation_template": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CollectionField"
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 999
                },
                "insert_time": {
                    "type": "string"
                },
                "last_update_time": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CollectionMapping"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.CollectionField": {
            "type": "object",
            "properties": {
                "header": {
                    "type": "string"
                },
                "regex": {
                    "type": "string"
                },
                "regexError": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                }
            }
        },
        "model.CollectionIn": {
            "type": "object",
            "required": [
                "categories",
                "name"
            ],
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "citation_template": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CollectionField"
                    }
                },
                "location": {
                    "type": "string"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CollectionMapping"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.CollectionMapping": {
            "type": "object",
            "properties": {
                "dbField": {
                    "type": "string"
                },
                "header": {
                    "type": "string"
                },
                "ixField": {
                    "type": "string"
                },
                "ixRole": {
                    "type": "string"
                }
            }
        },
        "model.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "params": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.Place": {
            "type": "object",
            "properties": {
                "alsoLocatedInIds": {
                    "type": "object",
                    "$ref": "#/definitions/model.Uint32Slice"
                },
                "altNames": {
                    "type": "object",
                    "$ref": "#/definitions/model.StringSlice"
                },
                "count": {
                    "type": "integer"
                },
                "countryId": {
                    "type": "integer"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "insert_time": {
                    "type": "string"
                },
                "last_update_time": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "level": {
                    "type": "integer"
                },
                "locatedInId": {
                    "type": "integer"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "types": {
                    "type": "object",
                    "$ref": "#/definitions/model.StringSlice"
                }
            }
        },
        "model.Post": {
            "type": "object",
            "required": [
                "collection",
                "id",
                "name"
            ],
            "properties": {
                "collection": {
                    "type": "integer",
                    "example": 999
                },
                "id": {
                    "type": "integer",
                    "example": 999
                },
                "imagesKeys": {
                    "type": "object",
                    "$ref": "#/definitions/model.StringSet"
                },
                "imagesStatus": {
                    "type": "string"
                },
                "insert_time": {
                    "type": "string"
                },
                "last_update_time": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "recordsKey": {
                    "type": "string"
                },
                "recordsStatus": {
                    "type": "string"
                }
            }
        },
        "model.PostIn": {
            "type": "object",
            "required": [
                "collection",
                "name"
            ],
            "properties": {
                "collection": {
                    "type": "integer",
                    "example": 999
                },
                "imagesKeys": {
                    "type": "object",
                    "$ref": "#/definitions/model.StringSet"
                },
                "imagesStatus": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "recordsKey": {
                    "type": "string"
                },
                "recordsStatus": {
                    "type": "string"
                }
            }
        },
        "model.Record": {
            "type": "object",
            "required": [
                "data",
                "id",
                "post"
            ],
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 999
                },
                "insert_time": {
                    "type": "string"
                },
                "ix_hash": {
                    "type": "string"
                },
                "last_update_time": {
                    "type": "string"
                },
                "post": {
                    "type": "integer",
                    "example": 999
                }
            }
        },
        "model.SearchEvent": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "place": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.SearchFacet": {
            "type": "object",
            "properties": {
                "buckets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SearchFacetBucket"
                    }
                },
                "errorUpperBound": {
                    "type": "integer"
                },
                "otherDocCount": {
                    "type": "integer"
                }
            }
        },
        "model.SearchFacetBucket": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "model.SearchHit": {
            "type": "object",
            "properties": {
                "collection": {
                    "type": "integer"
                },
                "collectionLocation": {
                    "description": "only returned on search by id",
                    "type": "string"
                },
                "collectionName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "person": {
                    "type": "object",
                    "$ref": "#/definitions/model.SearchPerson"
                },
                "record": {
                    "description": "only returned on search by id",
                    "type": "object",
                    "$ref": "#/definitions/model.SearchRecord"
                },
                "score": {
                    "type": "number"
                }
            }
        },
        "model.SearchLabelValue": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.SearchPerson": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SearchEvent"
                    }
                },
                "name": {
                    "type": "string"
                },
                "relationships": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SearchRelationship"
                    }
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "model.SearchRecord": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/model.SearchLabelValue"
            }
        },
        "model.SearchRelationship": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.SearchResult": {
            "type": "object",
            "properties": {
                "facets": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.SearchFacet"
                    }
                },
                "hits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SearchHit"
                    }
                },
                "maxScore": {
                    "type": "number"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "model.Settings": {
            "type": "object",
            "properties": {
                "insert_time": {
                    "type": "string"
                },
                "last_update_time": {
                    "type": "string"
                },
                "postMetadata": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SettingsPostMetadata"
                    }
                }
            }
        },
        "model.SettingsPostMetadata": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "tooltip": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.StringSet": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "model.StringSlice": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "model.Uint32Slice": {
            "type": "array",
            "items": {
                "type": "integer"
            }
        }
    },
    "securityDefinitions": {
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://ourroots.auth0.com/authorize?audience=https%3A%2F%2Fapi.ourroots.org%2Fpreprod",
            "scopes": {
                "cms": " Grants read and write access to the CMS",
                "email": " Grants access to OIDC email attributes",
                "openid": " Indicates that the application intends to use OIDC to verify the user's identity",
                "profile": " Grants access to OIDC user profile attributes"
            }
        }
    }
}