AWSTemplateFormatVersion: '2010-09-09'
Description: OurRoots CMS Server
Transform: AWS::Serverless-2016-10-31
Parameters:
  EnvironmentName:
    Description: Name of this CMS deployment
    Type: String
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet
      in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet
      in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:
          Ref: EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: EnvironmentName
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Subnet (AZ1)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Subnet (AZ2)
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: no-ingress-sg
      GroupDescription: Security group with no ingress rule
      VpcId:
        Ref: VPC
  AuroraMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join:
        - /
        - - rds-db-credentials
          - Ref: EnvironmentName
          - postgres
          - cms
          - master
      Description:
        Fn::Join:
        - ''
        - - 'Aurora PostgreSQL Master User Secret '
          - 'for CloudFormation Stack '
          - Ref: AWS::StackName
      Tags:
      - Key: DatabaseEngine
        Value: Aurora PostgreSQL
      - Key: StackID
        Value:
          Ref: AWS::StackId
      GenerateSecretString:
        SecretStringTemplate: '{"username": "ourroots_schema"}'
        GenerateStringKey: password
        ExcludePunctuation: true
        PasswordLength: 24
  AuroraMasterSecretClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: AuroraMasterSecret
      TargetId:
        Ref: AuroraDBCluster
      TargetType: AWS::RDS::DBCluster
  AuroraMasterSecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId:
        Ref: AuroraMasterSecret
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Deny
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
          Action: secretsmanager:DeleteSecret
          Resource: '*'
  AuroraAppSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join:
        - /
        - - rds-db-credentials
          - Ref: EnvironmentName
          - postgres
          - cms
          - app
      Description:
        Fn::Join:
        - ''
        - - 'Aurora PostgreSQL App User Secret '
          - 'for CloudFormation Stack '
          - Ref: AWS::StackName
      Tags:
      - Key: DatabaseEngine
        Value: Aurora PostgreSQL
      - Key: StackID
        Value:
          Ref: AWS::StackId
      GenerateSecretString:
        SecretStringTemplate: '{"username": "ourroots"}'
        GenerateStringKey: password
        ExcludePunctuation: true
        PasswordLength: 24
  AuroraAppSecretClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: AuroraAppSecret
      TargetId:
        Ref: AuroraDBCluster
      TargetType: AWS::RDS::DBCluster
  AuroraAppSecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId:
        Ref: AuroraAppSecret
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Deny
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
          Action: secretsmanager:DeleteSecret
          Resource: '*'
  ClusterDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription:
        Fn::Sub: DBSubnetGroup for ${EnvironmentName}-cms
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Ref: AWS::StackName
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-AuroraClusterSecurityGroup
  ClusterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - ClusterSecurityGroup
        - GroupId
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Ref: ClusterSecurityGroup
      Description: Self Reference
  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DatabaseName: cms
      DBClusterIdentifier:
        Fn::Sub: ${EnvironmentName}-cms
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: '10.7'
      MasterUsername:
        Fn::Join:
        - ''
        - - '{{resolve:secretsmanager:'
          - Ref: AuroraMasterSecret
          - :SecretString:username}}
      MasterUserPassword:
        Fn::Join:
        - ''
        - - '{{resolve:secretsmanager:'
          - Ref: AuroraMasterSecret
          - :SecretString:password}}
      DBSubnetGroupName:
        Ref: ClusterDBSubnetGroup
      VpcSecurityGroupIds:
      - Ref: ClusterSecurityGroup
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 2
        SecondsUntilAutoPause: 300
  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${EnvironmentName}-site
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: SiteBucket
      PolicyDocument:
        Id: SiteBucketPolicy
        Version: 2012-10-17
        Statement:
        - Sid: ReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action:
          - s3:GetObject
          Resource:
            Fn::Join:
            - ''
            - - Fn::GetAtt:
                - SiteBucket
                - Arn
              - /*
  CMSBlobStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${EnvironmentName}-cms-blob-store
  CMSRecordsWriterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: recordswriter
Outputs:
  CMSSiteBucketName:
    Description: CMS Site Bucket Name
    Value:
      Ref: SiteBucket
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-CMSSiteBucketName
  CMSSiteBucketURL:
    Description: CMS Site Bucket Website URL
    Value:
      Fn::GetAtt:
      - SiteBucket
      - WebsiteURL
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-CMSSiteBucketURL
  CMSPostgresAddress:
    Value:
      Fn::GetAtt:
      - AuroraDBCluster
      - Endpoint.Address
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-CMSPostgresAddress
  CMSPostgresPort:
    Value:
      Fn::GetAtt:
      - AuroraDBCluster
      - Endpoint.Port
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-CMSPostgresPort
  AuroraMasterSecretARN:
    Value:
      Ref: AuroraMasterSecret
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-AuroraMasterSecretARN
  AuroraAppSecretARN:
    Value:
      Ref: AuroraAppSecret
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-AuroraAppSecretARN
  CMSBlobStoreBucketName:
    Value:
      Ref: CMSBlobStoreBucket
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-CMSBlobStoreBucketName
  CMSRecordsWriterQueueURL:
    Value:
      Ref: CMSRecordsWriterQueue
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-CMSRecordsWriterQueueURL
  CMSRecordsWriterQueueARN:
    Value:
      Fn::GetAtt:
      - CMSRecordsWriterQueue
      - Arn
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-CMSRecordsWriterQueueARN
  PrivateSubnet1:
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-PrivateSubnet1
  PrivateSubnet2:
    Value:
      Ref: PrivateSubnet2
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-PrivateSubnet2
  AuroraDBClusterID:
    Value:
      Ref: AuroraDBCluster
    Export:
      Name:
        Fn::Sub: ${EnvironmentName}-AuroraDBClusterID
