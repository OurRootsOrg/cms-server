AWSTemplateFormatVersion: "2010-09-09"
Description: OurRoots CMS Server
Transform: AWS::Serverless-2016-10-31
Parameters:
  EnvironmentName:
    Description: Name of this CMS deployment
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # NatGateway2EIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # NatGateway2:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatGateway2EIP.AllocationId
  #     SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      # NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  LambdaFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  !Join [ " - ", [ "Security group for CMS Lambda ENIs", !Ref 'AWS::StackName' ] ]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-LambdaFunctionSecurityGroup'

  LambdaFunctionSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt 'LambdaFunctionSecurityGroup.GroupId'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref LambdaFunctionSecurityGroup
      Description: 'Self Reference'

  AuroraMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join ['/', ['rds-db-credentials', !Ref 'EnvironmentName', 'postgres', 'cms', 'master']]
      Description: !Join ['', ['Aurora PostgreSQL Master User Secret ', 'for CloudFormation Stack ', !Ref 'AWS::StackName']]
      Tags:
        -
          Key: DatabaseEngine
          Value: 'Aurora PostgreSQL'
        -
          Key: StackID
          Value: !Ref 'AWS::StackId'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "ourroots_schema"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        PasswordLength: 24

  AuroraMasterSecretClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AuroraMasterSecret
      TargetId: !Ref AuroraDBCluster
      TargetType: AWS::RDS::DBCluster

  AuroraMasterSecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref AuroraMasterSecret
      ResourcePolicy:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Deny"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "secretsmanager:DeleteSecret"
            Resource: "*"

  AuroraAppSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join ['/', ['rds-db-credentials', !Ref 'EnvironmentName', 'postgres', 'cms', 'app']]
      Description: !Join ['', ['Aurora PostgreSQL App User Secret ', 'for CloudFormation Stack ', !Ref 'AWS::StackName']]
      Tags:
        -
          Key: DatabaseEngine
          Value: 'Aurora PostgreSQL'
        -
          Key: StackID
          Value: !Ref 'AWS::StackId'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "ourroots"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        PasswordLength: 24

  AuroraAppSecretClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AuroraAppSecret
      TargetId: !Ref AuroraDBCluster
      TargetType: AWS::RDS::DBCluster

  AuroraAppSecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref AuroraAppSecret
      ResourcePolicy:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Deny"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "secretsmanager:DeleteSecret"
            Resource: "*"

  ClusterDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Sub "DBSubnetGroup for ${EnvironmentName}-cms"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  ClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !Ref LambdaFunctionSecurityGroup
        Description: 'Access to Lambda Security Group'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-AuroraClusterSecurityGroup'

  ClusterSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt 'ClusterSecurityGroup.GroupId'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSecurityGroup
      Description: 'Self Reference'

  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DatabaseName: "cms"
      DBClusterIdentifier: !Sub "${EnvironmentName}-cms"
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: "10.7"
      MasterUsername:
        !Join ['', ['{{resolve:secretsmanager:', !Ref AuroraMasterSecret, ':SecretString:username}}' ]]
      MasterUserPassword:
        !Join ['', ['{{resolve:secretsmanager:', !Ref AuroraMasterSecret, ':SecretString:password}}' ]]
      # BackupRetentionPeriod: 35
      # DeletionProtection: true
      DBSubnetGroupName: !Ref ClusterDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref ClusterSecurityGroup
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 2
        SecondsUntilAutoPause: 300

  SiteBucket:
    # Bucket to hold static site assets
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvironmentName}-site"
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
    # DeletionPolicy: Retain
  SiteBucketPolicy:
    # Allow reads from the bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Id: SiteBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: ReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource: !Join [ '', [ Fn::GetAtt: [ SiteBucket , Arn ] , '/*' ] ]

  CMSBlobStoreBucket:
    # Bucket to hold uploaded content
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvironmentName}-cms-blob-store"
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET, PUT, HEAD, POST, DELETE]
          AllowedOrigins: ['*']
          # AllowedOrigins: [!Sub "https:://${DomainName}"]
          MaxAge: 3600

    # DeletionPolicy: Retain

  CMSRecordsWriterDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${EnvironmentName}-recordswriterDLQ"

  CMSRecordsWriterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${EnvironmentName}-recordswriter"
      VisibilityTimeout: 180
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CMSRecordsWriterDLQ.Arn
        maxReceiveCount: 3
      # ContentBasedDeduplication: Boolean
      # DelaySeconds: Integer
      # FifoQueue: Boolean
      # KmsDataKeyReusePeriodSeconds: Integer
      # KmsMasterKeyId: String
      # MaximumMessageSize: Integer
      # MessageRetentionPeriod: Integer

  CMSPublisherDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${EnvironmentName}-publisherDLQ"

  CMSPublisherQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${EnvironmentName}-publisher"
      VisibilityTimeout: 180
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CMSPublisherDLQ.Arn
        maxReceiveCount: 3

  ElasticsearchDomain:
    Type: 'AWS::Elasticsearch::Domain'
    Properties:
      DomainName: !Sub ${EnvironmentName}-es
      ElasticsearchClusterConfig:
        # DedicatedMasterEnabled: 'true'
        # InstanceCount: '2'
        # ZoneAwarenessEnabled: 'true'
        InstanceType: t2.small.elasticsearch
        # DedicatedMasterType: c4.large.elasticsearch
        # DedicatedMasterCount: '3'
      ElasticsearchVersion: '7.4'
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: standard # One of gp2, io1, standard
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action: 'es:ESHttp*'
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${EnvironmentName}-es/*'
      # LogPublishingOptions:
      #   SEARCH_SLOW_LOGS:
      #     CloudWatchLogsLogGroupArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:${EnvironmentName}/ElasticSearch/search-slow-logs'
      #     Enabled: true
      #   INDEX_SLOW_LOGS:
      #     CloudWatchLogsLogGroupArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:${EnvironmentName}/ElasticSearch/index-slow-logs'
      #     Enabled: true
      #   ES_APPLICATION_LOGS:
      #     CloudWatchLogsLogGroupArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:${EnvironmentName}/ElasticSearch/application-logs'
      #     Enabled: true
  CMSSiteBucketURLParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-CMSSiteBucketURL"
      Description: CMS Site Bucket Website URL
      Type: String
      Value: !GetAtt SiteBucket.WebsiteURL
  CMSPostgresAddressParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-CMSPostgresAddress"
      Type: String
      Value: !GetAtt AuroraDBCluster.Endpoint.Address
  CMSPostgresPortParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-CMSPostgresPort"
      Type: String
      Value: !GetAtt AuroraDBCluster.Endpoint.Port
  AuroraMasterSecretARNParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-AuroraMasterSecretARN"
      Type: String
      Value: !Ref AuroraMasterSecret
  AuroraAppSecretARNParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-AuroraAppSecretARN"
      Type: String
      Value: !Ref AuroraAppSecret
  CMSBlobStoreBucketNameParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-CMSBlobStoreBucketName"
      Type: String
      Value: !Ref CMSBlobStoreBucket
  CMSRecordsWriterQueueURLParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-CMSRecordsWriterQueueURL"
      Type: String
      Value: !Ref CMSRecordsWriterQueue
  CMSRecordsWriterQueueARNParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-CMSRecordsWriterQueueARN"
      Type: String
      Value: !GetAtt CMSRecordsWriterQueue.Arn
  CMSPublisherQueueURLParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-CMSPublisherQueueURL"
      Type: String
      Value: !Ref CMSPublisherQueue
  CMSPublisherQueueARNParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-CMSPublisherQueueARN"
      Type: String
      Value: !GetAtt CMSPublisherQueue.Arn
  ElasticsearchDomainARNParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-ElasticsearchDomainARN"
      Type: String
      Value: !GetAtt ElasticsearchDomain.DomainArn
  LambdaFunctionSecurityGroupParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-LambdaFunctionSecurityGroup"
      Type: String
      Value: !Ref LambdaFunctionSecurityGroup
  PrivateSubnet1Param:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-PrivateSubnet1"
      Type: String
      Value: !Ref PrivateSubnet1
  PrivateSubnet2Param:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-PrivateSubnet2"
      Type: String
      Value: !Ref PrivateSubnet2
  ElasticsearchDomainEndpointParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${EnvironmentName}-ElasticsearchDomainEndpoint"
      Type: String
      Value: !GetAtt ElasticsearchDomain.DomainEndpoint

# Outputs:
#   CMSPostgresAddress:
#     Value: !GetAtt AuroraDBCluster.Endpoint.Address
#     Export:
#       Name: !Sub "${EnvironmentName}-CMSPostgresAddress"
#   CMSPostgresPort:
#     Value: !GetAtt AuroraDBCluster.Endpoint.Port
#     Export:
#       Name: !Sub "${EnvironmentName}-CMSPostgresPort"
#   AuroraMasterSecretARN:
#     Value: !Ref AuroraMasterSecret
#     Export:
#       Name: !Sub "${EnvironmentName}-AuroraMasterSecretARN"
#   AuroraAppSecretARN:
#     Value: !Ref AuroraAppSecret
#     Export:
#       Name: !Sub "${EnvironmentName}-AuroraAppSecretARN"
#   CMSBlobStoreBucketName:
#     Value: !Ref CMSBlobStoreBucket
#     Export:
#       Name: !Sub "${EnvironmentName}-CMSBlobStoreBucketName"
#   CMSRecordsWriterQueueURL:
#     Value: !Ref CMSRecordsWriterQueue
#     Export:
#       Name: !Sub "${EnvironmentName}-CMSRecordsWriterQueueURL"
#   CMSRecordsWriterQueueARN:
#     Value: !GetAtt CMSRecordsWriterQueue.Arn
#     Export:
#       Name: !Sub "${EnvironmentName}-CMSRecordsWriterQueueARN"
#   CMSPublisherQueueURL:
#     Value: !Ref CMSPublisherQueue
#     Export:
#       Name: !Sub "${EnvironmentName}-CMSPublisherQueueURL"
#   CMSPublisherQueueARN:
#     Value: !GetAtt CMSPublisherQueue.Arn
#     Export:
#       Name: !Sub "${EnvironmentName}-CMSPublisherQueueARN"
#   PublicSubnet1:
#     Value: !Ref PublicSubnet1
#     Export:
#       Name: !Sub "${EnvironmentName}-PublicSubnet1"
#   PublicSubnet2:
#     Value: !Ref PublicSubnet2
#     Export:
#       Name: !Sub "${EnvironmentName}-PublicSubnet2"
#   PrivateSubnet1:
#     Value: !Ref PrivateSubnet1
#     Export:
#       Name: !Sub "${EnvironmentName}-PrivateSubnet1"
#   PrivateSubnet2:
#     Value: !Ref PrivateSubnet2
#     Export:
#       Name: !Sub "${EnvironmentName}-PrivateSubnet2"
#   LambdaFunctionSecurityGroup:
#     Value: !Ref LambdaFunctionSecurityGroup
#     Export:
#       Name: !Sub "${EnvironmentName}-LambdaFunctionSecurityGroup"
#   AuroraDBClusterID:
#     Value: !Ref AuroraDBCluster
#     Export:
#       Name: !Sub "${EnvironmentName}-AuroraDBClusterID"
#   ElasticsearchDomainARN:
#     Value: !GetAtt ElasticsearchDomain.DomainArn
#     Export:
#       Name: !Sub "${EnvironmentName}-ElasticsearchDomainARN"
#   ElasticsearchDomainEndpoint:
#     Value: !GetAtt ElasticsearchDomain.DomainEndpoint
#     Export:
#       Name: !Sub "${EnvironmentName}-ElasticsearchDomainEndpoint"

